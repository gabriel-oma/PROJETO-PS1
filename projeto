import time

usuarios = []
atividades = []

atividades_predefinidas = {
    "Reciclagem de materiais": 20,
    "Coleta seletiva": 20,
    "Reutilização de água da chuva": 30,
    "Consumo de alimentos orgânicos": 15,
    "Uso de bicicletas": 10,
    "Evitar o uso de plástico descartável": 25,
    "Reflorestamento e plantio de árvores": 40,
    "Descarte correto de pilhas": 50,
    "Uso de lâmpadas LED": 5,
    "Redução do desperdício de água e energia": 15,
    "Uso de transporte público": 15,
}

recompensas = [
    (100, "Desconto em lojas sustentáveis ou cashback de R$ 10,00"),
    (250, "Voucher de alimentação saudável ou R$ 30,00"),
    (350, "Garrafa térmica ecológica ou R$ 50,00"),
    (500, "Kit de reciclagem ou R$ 70,00"),
    (700, "Kit de produtos sustentáveis ou R$ 100,00"),
    (1000, "Gift Card de R$ 150,00 ou assinatura em serviços ecológicos"),
]

def cadastrar_usuario():
    username = input("Digite o username do usuário: ")
    email = input("Digite o email do usuário: ")
    if any(user['username'] == username for user in usuarios):
        print("Usuário já cadastrado!\n")
        return
    if any(user['email'] == email for user in usuarios):
        print("Email já cadastrado!\n")
        return
    usuarios.append({"username": username, "email": email, "pontos": 0, "atividades_realizadas": 0})
    print(f"Usuário {username} cadastrado com sucesso!\n")
    time.sleep(1)

def excluir_usuario():
    username = input("Digite o username do usuário que deseja excluir: ")
    global usuarios
    usuarios = [u for u in usuarios if u['username'] != username]
    print(f"Usuário {username} excluído com sucesso!\n")
    time.sleep(1)

def registrar_atividade():
    username = input("Digite o username do usuário: ")
    usuario = next((u for u in usuarios if u['username'] == username), None)
    if not usuario:
        print("Usuário não encontrado!\n")
        return
    
    print("\nEscolha uma atividade sustentável realizada:")
    for i, (atividade, pontos) in enumerate(atividades_predefinidas.items(), 1):
        print(f"{i}. {atividade} ({pontos} pontos)")
    
    try:
        escolha = int(input("\nDigite o número da atividade escolhida ou 0 para outra: "))
        if escolha == 0:
            atividade = input("Digite o nome da atividade sustentável: ")
            pontos = 10
        else:
            atividade = list(atividades_predefinidas.keys())[escolha - 1]
            pontos = atividades_predefinidas[atividade]
    except (ValueError, IndexError):
        print("Opção inválida!\n")
        return
    
    try:
        quantidade = int(input("Quantas vezes essa atividade foi realizada? "))
    except ValueError:
        print("Número inválido!\n")
        return
    
    usuario["pontos"] += pontos * quantidade
    usuario["atividades_realizadas"] += quantidade
    atividades.append({"usuario": username, "atividade": atividade, "pontos": pontos, "quantidade": quantidade})
    print(f"Atividade '{atividade}' registrada para {username}!\n")
    time.sleep(1)

def excluir_atividade():
    username = input("Digite o username do usuário para excluir uma atividade: ")
    global atividades
    atividades = [a for a in atividades if a['usuario'] != username]
    print(f"Atividade de {username} excluída com sucesso!\n")
    time.sleep(1)

def listar_usuarios():
    if usuarios:
        print("\n////// Lista de Usuários //////")
        for usuario in usuarios:
            print(f"Username: {usuario['username']}, Email: {usuario['email']}, Pontos: {usuario['pontos']}, Atividades realizadas: {usuario['atividades_realizadas']}")
    else:
        print("Não há usuários cadastrados.\n")
    time.sleep(2)

def listar_atividades():
    if atividades:
        print("\n////// Lista de Atividades //////")
        for atividade in atividades:
            print(f"Usuário: {atividade['usuario']}, Atividade: {atividade['atividade']}, Pontos: {atividade['pontos']}, Quantidade: {atividade['quantidade']}")
    else:
        print("Não há atividades registradas.\n")
    time.sleep(2)

def opcoes_atividades_sustentaveis():
    print("\n////// Opções de Atividades Sustentáveis //////")
    for atividade, pontos in atividades_predefinidas.items():
        print(f"- {atividade}: {pontos} pontos")
    print("\nEssas são as atividades disponíveis para registrar!")
    time.sleep(2)

def dicas_para_recompensas():
    print("\n////// Dicas para Conseguir Mais Recompensas //////")
    dicas = [
        ("Reciclagem de materiais", "Separe resíduos recicláveis e leve-os a pontos de coleta."),
        ("Reutilização de água da chuva", "Instale um sistema para reutilizar água da chuva em casa."),
        ("Uso de bicicletas", "Substitua trajetos curtos feitos de carro por bicicleta."),
        ("Evitar o uso de plástico descartável", "Use sacolas reutilizáveis e evite canudos plásticos."),
    ]
    for atividade, dica in dicas:
        print(f"\n- {atividade}: {dica}")
    print("\nSiga essas dicas e registre suas atividades para acumular mais pontos!")
    time.sleep(2)

def ranking():
    print("\n////// Ranking de Usuários //////")
    ranking_usuarios = sorted(usuarios, key=lambda x: x['pontos'], reverse=True)
    for i, usuario in enumerate(ranking_usuarios, 1):
        print(f"{i}. {usuario['username']} - {usuario['pontos']} pontos")
    time.sleep(1)

def menu():
    while True:
        print("\n/////// GREEN MONEY ///////")
        print("1. Cadastrar novo usuário")
        print("2. Registrar atividades sustentáveis")
        print("3. Excluir usuário")
        print("4. Excluir atividade")
        print("5. Lista de usuários")
        print("6. Lista de atividades")
        print("7. Opções de atividades sustentáveis")
        print("8. Simulador de recompensas")
        print("9. Dicas para ganhar mais recompensas")
        print("10. Ranking de usuários")
        print("11. Sair")
        opcao = input("Escolha uma opção: ")
        if opcao == "11":
            break
        opcoes = {"1": cadastrar_usuario, "2": registrar_atividade, "3": excluir_usuario, "4": excluir_atividade, "5": listar_usuarios, "6": listar_atividades, "7": opcoes_atividades_sustentaveis, "8": ranking, "9": dicas_para_recompensas, "10": ranking}
        opcoes.get(opcao, lambda: print("Opção inválida"))()

menu()
